rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Allow read, update, delete only if the user is the owner
      allow read, update, delete: if request.auth.uid == userId;

      // Allow create only if the user is the owner and initial data is correct
      allow create: if request.auth.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.createdAt is timestamp &&
                       request.resource.data.plan == 'free' &&
                       request.resource.data.blogSites is list && request.resource.data.blogSites.size() == 0 &&
                       request.resource.data.productSites is list && request.resource.data.productSites.size() == 0;

      // For updates, ensure blogSites and productSites arrays do not exceed 3 items
      // This rule applies to any update operation on the user document.
      // It checks the size of the *incoming* data for these fields.
      // If the fields are not present in the update, their size check will be skipped.
      // If they are present, their size must be <= 3.
      allow update: if request.auth.uid == userId &&
                       (request.resource.data.blogSites == null || request.resource.data.blogSites.size() <= 3) &&
                       (request.resource.data.productSites == null || request.resource.data.productSites.size() <= 3);










      
      // UserSettings subcollection rules
      match /settings/{document=**} {
        // Allow read, update, delete only if the user is the owner
        allow read, update, delete: if request.auth.uid == userId;

        // Allow create only if the user is the owner and initial data is correct
        allow create: if request.auth.uid == userId &&
                         request.resource.data.createdAt is timestamp &&
                         request.resource.data.updatedAt is timestamp;
      }

      // Files subcollection rules
      match /files/{fileId} {
        // Allow read, create, update, delete only if the user is the owner
        allow read, create, update, delete: if request.auth.uid == userId;
      }

      // Blog Content subcollection rules
      match /blogs/{blogId}/posts/{postId} {
        // Allow read, write, update, delete only if the user is the owner
        allow read, write, update, delete: if request.auth.uid == userId;

        // Validate required fields for create operations
        allow create: if request.auth.uid == userId &&
                         request.resource.data.title is string &&
                         request.resource.data.slug is string &&
                         request.resource.data.content is string &&
                         request.resource.data.status in ['draft', 'published'] &&
                         request.resource.data.createdAt is timestamp &&
                         request.resource.data.updatedAt is timestamp &&
                         request.resource.data.author is string;

        // Validate required fields for update operations
        allow update: if request.auth.uid == userId &&
                         (request.resource.data.title == null || request.resource.data.title is string) &&
                         (request.resource.data.slug == null || request.resource.data.slug is string) &&
                         (request.resource.data.content == null || request.resource.data.content is string) &&
                         (request.resource.data.status == null || request.resource.data.status in ['draft', 'published']) &&
                         request.resource.data.updatedAt is timestamp;
      }

      // Product Content subcollection rules
      match /productSites/{siteId}/products/{productId} {
        // Allow read, write, update, delete only if the user is the owner
        allow read, write, update, delete: if request.auth.uid == userId;

        // Validate required fields for create operations
        allow create: if request.auth.uid == userId &&
                         request.resource.data.name is string &&
                         request.resource.data.slug is string &&
                         request.resource.data.price is number &&
                         request.resource.data.currency is string &&
                         request.resource.data.status in ['draft', 'published'] &&
                         request.resource.data.createdAt is timestamp &&
                         request.resource.data.updatedAt is timestamp;

        // Validate required fields for update operations
        allow update: if request.auth.uid == userId &&
                         (request.resource.data.name == null || request.resource.data.name is string) &&
                         (request.resource.data.slug == null || request.resource.data.slug is string) &&
                         (request.resource.data.price == null || request.resource.data.price is number) &&
                         (request.resource.data.currency == null || request.resource.data.currency is string) &&
                         (request.resource.data.status == null || request.resource.data.status in ['draft', 'published']) &&
                         request.resource.data.updatedAt is timestamp;
      }

      // Analytics subcollection rules
      match /analytics/{siteId}/events/{eventId} {
        // Allow read, write, update, delete only if the user is the owner
        allow read, write, update, delete: if request.auth.uid == userId;
      }
    }
  }
}